<project name="common-build" basedir="." xmlns:ac="antlib:net.sf.antcontrib">
    <description>Common Build File</description>

    <property name="charset" value="utf-8"/>
    <property name="gallery.dir" location="${ant.file.common-build}/../"/>
    <property name="gallery.build.dir" location="${gallery.dir}/../gallery-build/"/>
    <property name="kissy-tools.dir" location="${gallery.dir}/../../kissy-tools/"/>

    <property name="src.dir" value="src.dir.need.override"/>
    <property name="component.name" value="component.name.need.override"/>
    <property name="component.version" value="component.version.need.override"/>

    <property name="component.build.dir" location="${gallery.build.dir}/gallery/${component.name}/${component.version}"/>
    <property name="component.build.dir.tmp" value="${component.build.dir}/tmp"/>
    <property name="copyright.files" value="**/*.css, **/*.js"/>

    <property name="version" value="1.0dev"/>
    <tstamp>
        <format property="timestamp.isoformat"
                pattern="yyyyMMddHHmmss" locale="en"/>
    </tstamp>


    <target name="componentduilddircheck">
        <condition property="component.build.dir.exists">
            <available file="${component.build.dir}" type="dir"/>
        </condition>
    </target>

    <target name="clear" if="component.build.dir.exists" depends="componentduilddircheck">
        <delete includeemptydirs="true">
            <fileset dir="${component.build.dir}" includes="**/*"/>
        </delete>
    </target>

    <target name="concat">
        <mkdir dir="${component.build.dir}"/>
        <concat destfile="${component.build.dir}/index.js"
                encoding="utf-8"
                outputencoding="utf-8">
            <fileset dir="${src.dir}" includes="*.js" excludes="modules.js"/>
            <filterchain>
                <deletecharacters chars="&#xFEFF;"/>
            </filterchain>
        </concat>
        <copy todir="${component.build.dir}">
            <fileset dir="${src.dir}" includes="modules.js"/>
        </copy>
    </target>

    <target name="componentassetsdircheck">
        <condition property="component.assets.dir.exists">
            <available file="${src.dir}/assets" type="dir"/>
        </condition>
    </target>

    <target name="assets" if="component.assets.dir.exists" depends="componentassetsdircheck">
        <copydir dest="${component.build.dir}/assets" src="${src.dir}/assets"/>
    </target>

    <target name="compress">
        <!-- 用 YUICompressor 压缩 CSS -->
        <apply executable="java" verbose="true"
               dest="${component.build.dir}">
            <fileset dir="${component.build.dir}"
                     includes="**/*.css"/>
            <arg line="-jar"/>
            <arg path="${kissy-tools.dir}/yuicompressor/yuicompressor.jar"/>
            <arg line="--charset ${charset}"/>
            <srcfile/>
            <arg line="-o"/>
            <targetfile/>
            <mapper type="regexp" from="^(.*)\.(css|js)$" to="\1-min.\2"/>
        </apply>

        <!-- 用 Closure Compiler 压缩 JS -->
        <apply executable="java" verbose="true"
               dest="${component.build.dir}">
            <fileset dir="${component.build.dir}"
                     includes="**/*.js"
                    />
            <arg line="-jar"/>
            <arg path="${kissy-tools.dir}/closure-compiler/compiler.jar"/>
            <arg line="--charset ${charset}"/>
            <arg value="--warning_level"/>
            <arg value="QUIET"/>
            <arg value="--js"/>
            <srcfile/>
            <arg value="--js_output_file"/>
            <targetfile/>
            <mapper type="regexp" from="^(.*)\.(css|js)$" to="\1-min.\2"/>
        </apply>
    </target>

    <!-- 对 JS 文件 ASCII 化 -->
    <target name="native2ascii" depends="compress">
        <mkdir dir="${component.build.dir.tmp}"/>
        <move todir="${component.build.dir.tmp}">
            <fileset dir="${component.build.dir}" includes="*-min.js"/>
        </move>
        <native2ascii encoding="${charset}"
                      src="${component.build.dir.tmp}"
                      dest="${component.build.dir}"
                      includes="*.js"/>
        <delete dir="${component.build.dir.tmp}"/>
    </target>

    <!-- 替换版本信息以及给文件加上版权信息以及加上 bom 暂时不加 -->
    <target name="copyright">
        <tstamp>
            <format property="stamp.time" pattern="MMM d HH:mm" locale="en,UK"/>
            <format property="build.year" pattern="yyyy"/>
        </tstamp>

        <mkdir dir="${component.build.dir.tmp}"/>
        <move todir="${component.build.dir.tmp}">
            <fileset dir="${component.build.dir}" includes="${copyright.files}"/>
        </move>

        <ac:for param="file">
            <path>
                <fileset dir="${component.build.dir.tmp}"
                         includes="${copyright.files}"/>
            </path>
            <sequential>
                <!--如果不是压缩文件，就加上 bom 头，否则 ie 诡异问题-->
                <ac:var name="copyright.bomOrEmpty" value=""/>
                <ac:var name="copyright.file.name" unset="true"/>
                <basename property="copyright.file.name" file="@{file}"/>
                <ac:if>
                    <not>
                        <contains string="${copyright.file.name}"
                                  substring="-min."
                                  casesensitive="false"/>
                    </not>
                    <then>
                        <ac:var name="copyright.bomOrEmpty" value="&#xFEFF;"/>
                    </then>
                </ac:if>
                <concat destfile="@{file}.tmp"
                        encoding="${charset}"
                        outputencoding="${charset}">
                    <!-- ie need bom , wierd -->
                    <header filtering="no" trimleading="yes">${copyright.bomOrEmpty}/*
                        Copyright ${build.year}, KISSY Gallery Library v${version}
                        MIT Licensed
                        build time: ${stamp.time}
                        */
                    </header>
                    <fileset file="@{file}"/>
                    <filterchain>
                        <deletecharacters chars="&#xFEFF;"/>
                    </filterchain>
                </concat>
                <move file="@{file}.tmp"
                      tofile="@{file}"/>
            </sequential>
        </ac:for>

        <replaceregexp match="@VERSION@"
                       replace="${version}"
                       flags="g"
                       encoding="${charset}"
                       byline="true">
            <fileset dir="${component.build.dir.tmp}" includes="*.js,*.css"/>
        </replaceregexp>

        <replaceregexp match="@DEBUG@"
                       replace=""
                       flags="g"
                       byline="true"
                       encoding="${charset}">
            <fileset dir="${component.build.dir.tmp}" includes="*-min.js,*-min.css"/>
        </replaceregexp>

        <replaceregexp match="@TIMESTAMP@"
                       replace="${timestamp.isoformat}"
                       flags="g"
                       byline="true"
                       encoding="${charset}">
            <fileset dir="${component.build.dir.tmp}" includes="*.js,*.css"/>
        </replaceregexp>


        <move todir="${component.build.dir}">
            <fileset dir="${component.build.dir.tmp}"
                     includes="${copyright.files}"/>
        </move>
        <delete dir="${component.build.dir.tmp}"/>

    </target>


    <target name="fix-cr-lf">
        <fixcrlf srcdir="${component.build.dir}"
                 tablength="4"
                 includes="**/*.js,**/*.css"
                 encoding="${charset}"/>
    </target>

    <target name="common.build" depends="clear,concat,assets,compress,native2ascii,fix-cr-lf">   
    </target>
</project>